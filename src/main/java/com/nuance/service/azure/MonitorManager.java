/*-
 * #%L
 * test-azuremonitor
 * %%
 * Copyright (C) 2018 - 2021 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * 
 * Author: siyuan_bi
 * Date  : Nov 19, 2021, 12:04:41 PM
 * #L%
 */

package com.nuance.service.azure;

import com.azure.resourcemanager.AzureResourceManager;
import com.azure.resourcemanager.monitor.models.*;
import com.nuance.service.rest.controller.GreetingController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.time.Duration;
import java.util.Map;

@Component
public class MonitorManager {
    private static final Logger LOGGER = LoggerFactory.getLogger(MonitorManager.class);

    @Autowired
    AzureResourceManager azure;

    @PostConstruct
    public void createMetricAlert() {
        MetricAlert ma = azure.alertRules().metricAlerts().define("Java test alert")
                .withExistingResourceGroup("iep-poc-monitor")
                .withTargetResource("/subscriptions/416e4f7f-3466-4cd0-b530-0c50960d6d2c/resourceGroups/iep-poc-monitor/providers/microsoft.insights/components/iep-monitor-appinsights")
                .withPeriod(Duration.ofMinutes(1))
                .withFrequency(Duration.ofMinutes(1))
                .withAlertDetails(3, "This alert rule is a test generated by a Java app")
                .withActionGroups()
                .defineAlertCriteria("App Test Metric")
                    .withMetricName("requests/rate", "Microsoft.Insights/Components")
                    .withCondition(MetricAlertRuleTimeAggregation.AVERAGE, MetricAlertRuleCondition.GREATER_THAN, 1)
                    .attach()
                .create();
        print(ma);

        ActivityLogAlert ala = azure.alertRules().activityLogAlerts()
                .define("Potential security breach alert")
                .withExistingResourceGroup("iep-poc-monitor")
                .withTargetResource("/subscriptions/416e4f7f-3466-4cd0-b530-0c50960d6d2c/resourceGroups/iep-poc-monitor/providers/microsoft.insights/components/iep-monitor-appinsights")
                .withDescription("Security StorageAccounts ListAccountKeys trigger")
                .withRuleEnabled()
                .withActionGroups()
                // fire an alert when all the conditions below will be true
                .withEqualsCondition("category", "Security")
                .withEqualsCondition("operationName", "Microsoft.Storage/storageAccounts/listkeys/action")
                .create();
        print(ala);
    }

    public static void print(MetricAlert metricAlert) {
        StringBuilder info = new StringBuilder("Metric Alert: ")
                .append("\n\tId: ").append(metricAlert.id())
                .append("\n\tName: ").append(metricAlert.name())
                .append("\n\tDescription: ").append(metricAlert.description())
                .append("\n\tIs Enabled: ").append(metricAlert.enabled())
                .append("\n\tIs Auto Mitigated: ").append(metricAlert.autoMitigate())
                .append("\n\tSeverity: ").append(metricAlert.severity())
                .append("\n\tWindow Size: ").append(metricAlert.windowSize())
                .append("\n\tEvaluation Frequency: ").append(metricAlert.evaluationFrequency());

        if (metricAlert.scopes() != null && !metricAlert.scopes().isEmpty()) {
            info.append("\n\tScopes: ");
            for (String er : metricAlert.scopes()) {
                info.append("\n\t\tId: ").append(er);
            }
        }

        if (metricAlert.actionGroupIds() != null && !metricAlert.actionGroupIds().isEmpty()) {
            info.append("\n\tAction Groups: ");
            for (String er : metricAlert.actionGroupIds()) {
                info.append("\n\t\tAction Group Id: ").append(er);
            }
        }

        if (metricAlert.alertCriterias() != null && !metricAlert.alertCriterias().isEmpty()) {
            info.append("\n\tAlert conditions (when all of is true): ");
            for (Map.Entry<String, MetricAlertCondition> er : metricAlert.alertCriterias().entrySet()) {
                MetricAlertCondition alertCondition = er.getValue();
                info.append("\n\t\tCondition name: ").append(er.getKey())
                        .append("\n\t\tSignal name: ").append(alertCondition.metricName())
                        .append("\n\t\tMetric Namespace: ").append(alertCondition.metricNamespace())
                        .append("\n\t\tOperator: ").append(alertCondition.condition())
                        .append("\n\t\tThreshold: ").append(alertCondition.threshold())
                        .append("\n\t\tTime Aggregation: ").append(alertCondition.timeAggregation());
                if (alertCondition.dimensions() != null && !alertCondition.dimensions().isEmpty()) {
                    for (MetricDimension dimon : alertCondition.dimensions()) {
                        info.append("\n\t\tDimension Filter: ").append("Name [").append(dimon.name()).append("] operator [Include] values[");
                        for (String vals : dimon.values()) {
                            info.append(vals).append(", ");
                        }
                        info.append("]");
                    }
                }
            }
        }
        LOGGER.info(info.toString());
    }

    public static void print(ActivityLogAlert activityLogAlert) {

        StringBuilder info = new StringBuilder("Activity Log Alert: ")
                .append("\n\tId: ").append(activityLogAlert.id())
                .append("\n\tName: ").append(activityLogAlert.name())
                .append("\n\tDescription: ").append(activityLogAlert.description())
                .append("\n\tIs Enabled: ").append(activityLogAlert.enabled());

        if (activityLogAlert.scopes() != null && !activityLogAlert.scopes().isEmpty()) {
            info.append("\n\tScopes: ");
            for (String er : activityLogAlert.scopes()) {
                info.append("\n\t\tId: ").append(er);
            }
        }

        if (activityLogAlert.actionGroupIds() != null && !activityLogAlert.actionGroupIds().isEmpty()) {
            info.append("\n\tAction Groups: ");
            for (String er : activityLogAlert.actionGroupIds()) {
                info.append("\n\t\tAction Group Id: ").append(er);
            }
        }

        if (activityLogAlert.equalsConditions() != null && !activityLogAlert.equalsConditions().isEmpty()) {
            info.append("\n\tAlert conditions (when all of is true): ");
            for (Map.Entry<String, String> er : activityLogAlert.equalsConditions().entrySet()) {
                info.append("\n\t\t'").append(er.getKey()).append("' equals '").append(er.getValue()).append("'");
            }
        }
        LOGGER.info(info.toString());
    }
}
